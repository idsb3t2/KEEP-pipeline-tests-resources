apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: hello-containers_master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryNamespace
      description: the ibmcloud registry namespace
      default: "idsb3t2-e2e-cd"
    - name: imageName
      description: the base image name
      default: "hello-containers-tekton"
    - name: registryRegion
      description: the ibmcloud registry region
      default: "us-south"
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-build-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          echo "=============";
          cd /artifacts;
          ls -a;
          echo "=============";
          cd /workspace;
          source pre-build-check.sh;
    - name: build-docker-image
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.registryRegion)
        - name: HOME
          value: "/root"
        - name: REGISTRY_NAMESPACE
          value: $(params.registryNamespace)
        - name: IMAGE_NAME
          value: $(params.imageName)
        - name: ARCHIVE_DIR
          value: "/artifacts"
        - name: BUILD_NUMBER
          value: "0"
        - name: GIT_BRANCH
          value: $(params.revision)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh";
          export GIT_COMMIT=$(git rev-parse HEAD);
          export REGISTRY_URL=$(ibmcloud cr info | sed "2q;d" | awk '{for(i=1;i<=NF;i++) if ($i=="Registry") print $(i+1)}');
          cd /workspace;
          source build-docker-image.sh;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: hello-containers_master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: registryRegion
      description: the ibmcloud registry region
      default: "us-south"
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: check-vulnerabilities
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: HOME
          value: "/root"
        - name: REGION
          value: $(params.registryRegion)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          while read line; do export $line; done < /artifacts/build.properties;
          cd /workspace;
          cp /artifacts/build.properties .;
          source check-vulnerabilities.sh || true;
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-task
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: hello-containers_master
    - name: apikey
      description: the ibmcloud api key
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: deployment-file
      default: deployment.yml
    - name: clusterNamespace
      default: prod
    - name: cluster
      description: The IBM Cloud Kubernetes cluster name
      default: "keep-e2e-tests"
    - name: clusterRegion
      description: The IBM Cloud Kubernetes cluster region
      default: "us-south"
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: clone-repo
      image: alpine/git
      env:
        - name: REPOSITORY
          value: $(params.repository)
        - name: REVISION
          value: $(params.revision)
      command: ["/bin/sh", "-c"]
      args:
        - set -e -o pipefail;
          echo "Cloning $REPOSITORY";
          cd /workspace && git clone -q -b $REVISION $REPOSITORY .;
    - name: pre-deploy-check
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          $(ibmcloud ks cluster config --cluster "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --export);
          while read line; do export $line; done < /artifacts/build.properties;
          cd /workspace;
          cp /artifacts/build.properties .;
          source pre-deploy-check.sh;
    - name: deploy-to-kubernetes
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image
      env:
        - name: IBMCLOUD_API_KEY
          value: $(params.apikey)
        - name: API
          value: $(params.api)
        - name: REGION
          value: $(params.clusterRegion)
        - name: HOME
          value: "/root"
        - name: DEPLOYMENT_FILE
          value: $(params.deployment-file)
        - name: CLUSTER_NAMESPACE
          value: $(params.clusterNamespace)
        - name: PIPELINE_KUBERNETES_CLUSTER_NAME
          value: $(params.cluster)
      command: ["/bin/bash", "-c"]
      args:
        - set -e -o pipefail;
          ibmcloud login -a $API -r $REGION;
          $(ibmcloud ks cluster config --cluster "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --export);
          while read line; do export $line; done < /artifacts/build.properties;
          cd /workspace;
          cp /artifacts/build.properties .;
          source deploy-to-kubernetes.sh;
      
